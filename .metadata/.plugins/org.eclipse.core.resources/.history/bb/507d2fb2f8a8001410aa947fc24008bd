#include <iostream>
#include <unistd.h>
#include <vector>
#include <cstring>
#include <string>
#include <sys/wait.h>
#include <string>
#include <chrono>
#include "terminal.h"

using namespace std;

int main(int argc, char **argv) {
	while(true){
		std::cout << "RoninShell->>> ";
		std::string line = "stuff";
		std::getline(std::cin,line);
		std::vector<std::string> data = parse(line);
		static std::vector<std::string> history;
		//for(std::string s : data)
		//	std::cout << s << std::endl;
		auto start = std::chrono::system_clock::now();
		switch(switchVal(data[0])){
		//Quit
		case(0):
		{
			exit(0);
			break;
		};
		//History
		case(1):
		{
			for(int i = 0; i < history.size(); i++ )
				std::cout << i << ": " << history[i] << std::endl;
			break;
		};
		//History exec
		case(2):
		{
			std::cout << data.size() << std::endl;
			if(std::stoi(data[1]) < history.size() && std::stoi(data[1]) > 0)
				std::cout << history[1 - (std::stoi(data[1])-data.size())] << std::endl;
			else
				std::cout << "Bad Args" << std::endl;
			break;
		}
		//PTime
		case(3):
		{

			break;
		};
		//Regular Command
		default:
		{
			auto pid = fork();
			if(pid < 0){
				cerr << "Could not fork " << std::endl;
			}
			if (pid ==0){
				std::cout << "child" << std::endl;
				std::vector<char*> arg;
				arg.push_back(strdup(line.c_str())); //need to pass in the first command
				arg.push_back(nullptr); //terminate with nullptr
				execvp("ls", argv);
			} else {
				std::cout << "parent " << pid << std::endl;
			}
			//Add Command to History
			std::string temp = data[0];
			for(int i = 1; i < data.size(); i++)
				temp.append(" " + data[i]);
			history.push_back(temp);
			//wait for pid to finish
			waitpid(pid, nullptr, 0);
			auto stop = std::chrono::system_clock::now();
			std::chrono::microseconds time = stop - start;
			int secs, millis, micros;
			secs = time.count()/1000000;
			millis = time.count()/1000 - secs*1000;
			micros = time.count() - millis*1000 - secs*1000000;
			std::cout << "Process Time Taken: " << secs << " Seconds, " << millis << " Milliseconds, and " << micros << " Microseconds" << std::endl;
		};
		}
	}
}
